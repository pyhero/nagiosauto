#!/usr/bin/perl -w

use strict;

use Nagios::Plugin;
use Net::SNMP qw(snmp_dispatcher);
use FindBin qw($Bin);
use lib "$Bin/../utils/";
use MM::SNMP;
use MM::XML;
use Data::Serializer;

my $DIR_NAGIOS = "$Bin/..";
my $DIR_INFO = "$DIR_NAGIOS/info/squid";
my $CHK_ALIVE  = "/usr/sbin/fping -a";

my $message;

my $np = Nagios::Plugin->new(
    usage   => "Usage: %s [-H|--host=<host>]",
    version => "0.0.1",
);
$np->add_arg(
    spec     => "H|host=s",
    help     => "Hostname or IP Address",
    required => 1,
);
$np->getopts();

my $device = $np->opts->H;

# Retrieve authkey/privkey for SNMPv3 authentication
my $config = MM::XML::xmlRetrieveConfig($device, "squid");

# Check if the device is alive
my $fpingflag = $config->{'fping'};
if (defined($fpingflag) && $fpingflag == 0 && !`$CHK_ALIVE $device 2>/dev/null`) {
    $np->nagios_exit(WARNING, "$device is unreachable.");
}

# Create an SNMP Session
my ($session, $error) = MM::SNMP::squidsnmpCreateSession($device, $config->{'read-community'}, $config->{'port'} || 3402, $config->{'version'});

if (!defined($session)) {
    $np->nagios_exit(WARNING, $error);
}

# OID definitions
# every scalar variable has a ".0" suffix
my $oid_cacheSysVMsize = ".1.3.6.1.4.1.3495.1.1.1.0";
my $oid_cacheSysStorage = ".1.3.6.1.4.1.3495.1.1.2.0";
my $oid_cacheSoftware = ".1.3.6.1.4.1.3495.1.2.2.0";
my $oid_cacheVersionId = ".1.3.6.1.4.1.3495.1.2.3.0";
my $oid_cacheMemMaxSize = ".1.3.6.1.4.1.3495.1.2.5.1.0";
my $oid_cacheSwapMaxSize = ".1.3.6.1.4.1.3495.1.2.5.2.0";
my $oid_cacheUniqName = ".1.3.6.1.4.1.3495.1.2.6.0";


my @scalar_list;
push( @scalar_list,
      $oid_cacheSysVMsize,
      $oid_cacheSysStorage,
      $oid_cacheSoftware,
      $oid_cacheVersionId,
      $oid_cacheMemMaxSize,
      $oid_cacheSwapMaxSize,
);

my @scalar_list2;
push( @scalar_list2,
      $oid_cacheUniqName,
);

# Get...
my ($res_scalar, $res_scalar2);
my $stat_scalar = MM::SNMP::snmpGetScalar($session, \$res_scalar, \@scalar_list);
if (!defined($stat_scalar)) {
    $np->nagios_exit(WARNING, $session->error());
}
my $stat_scalar2 = MM::SNMP::snmpGetScalar($session, \$res_scalar2, \@scalar_list2);
if (!defined($stat_scalar2)) {
    $np->nagios_exit(WARNING, $session->error());
}
snmp_dispatcher();

if (!defined($res_scalar)) {
    $np->nagios_exit(WARNING, $session->error());
}

$session->close();
&data_processing();

$np->nagios_exit(OK, $message);

# main end

sub data_processing
{
    my @devicedirs = split(/\./, $device);
    my $pubIP;
    my %hash;
    if (defined($res_scalar2->{$oid_cacheUniqName})) {
        ($hash{'privIP'}, $hash{'pubIP'}) = &computeIP($res_scalar2->{$oid_cacheUniqName});
    } else {
        ($hash{'privIP'}, $hash{'pubIP'}) = ("Unsupported", "Unsupported");
    }
    $hash{'version'} = $res_scalar->{$oid_cacheSoftware} . " " . $res_scalar->{$oid_cacheVersionId};
    $hash{'memSize'} = sprintf("%d", $res_scalar->{$oid_cacheSysVMsize} / 1024);
    $hash{'swapSize'} = sprintf("%d", $res_scalar->{$oid_cacheSysStorage} / 1024);
    $hash{'memMaxSize'} = $res_scalar->{$oid_cacheMemMaxSize};
    # dirty `fix' here
    while ($hash{'memMaxSize'} < $hash{'memSize'} || $hash{'memMaxSize'} <= 0) {
        $hash{'memMaxSize'} += 2048;
    }
    $hash{'swapMaxSize'} = $res_scalar->{$oid_cacheSwapMaxSize};
    $message = $hash{'version'} ." Mem: " . $hash{'memSize'} . "/" . $hash{'memMaxSize'} . "MB Swap: " . $hash{'swapSize'} . "/"
             . $hash{'swapMaxSize'} . "MB Private IP: " . $hash{'privIP'} . " Public IP: " . $hash{'pubIP'};

    my $serializer = Data::Serializer->new();
    my $dir = "$DIR_INFO";
    foreach my $seg (@devicedirs) {
        $dir .= "/$seg";
        if (!-d $dir) {
            unlink("$dir") if (-e $dir);
            mkdir("$dir");
        }
    }
    $hash{'timestamp'} = time();
    $serializer->store(\%hash, "$dir/squid2info", "w", 0644);

    my @pubIPdirs = split(/\./, $hash{'pubIP'});
    my $lastseg = pop(@pubIPdirs);
    my $ldir = "$DIR_INFO";
    foreach my $seg (@pubIPdirs) {
        $ldir .= "/$seg";
        if (!-e $ldir) {
            mkdir "$ldir";
        } elsif (!-d $ldir && !-l $ldir) {
            unlink("$ldir");
            mkdir("$ldir");
        }
    }
    $ldir .= "/$lastseg";
    if (-e $ldir) {
        if (-d $ldir) {
            system("/bin/rm -rf $ldir");
        } else {
            unlink("$ldir");
        }
    }
    symlink($dir, $ldir);
}

sub computeIP
{
    my $name = $_[0];
    my @t = ($name =~ /(\d+)/g);
    my ($x, $y, $z);
    $x = ($t[0] * 3 - $t[1] - $t[2]);
    $y = $t[1] - $t[0];
    $z = $t[2] - $t[0];
    my (@X, @Y, @Z);
    @X = &long2ip($x);
    @Y = &long2ip($y);
    @Z = &long2ip($z);
    return ("$X[0].$X[1].$X[2].$Y[0]", "$Y[2].$Z[0].$Z[1].$Z[2]");
}

sub long2ip
{
    my $long = $_[0];
    my ($a, $b, $c);
    $a = (($long&0xFF0000)>>16);
    $b = (($long&0x00FF00)>>8);
    $c = ($long&0x0000FF);
    return ($a, $b, $c);
}

