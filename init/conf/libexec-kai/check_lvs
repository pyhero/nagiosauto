#!/usr/bin/perl -w
#
# check_lvs v 0.0.1 - Nagios(r) check lvs plugin
#
# Copyright (c) 2007 Vino Duan <vinoduan@sohu-inc.com>
# 
# 
# 2007-10-10

use strict;
use Net::SNMP qw(oid_lex_sort oid_base_match snmp_dispatcher);
use XML::Simple;
use RRDs;
use Time::Period;
use Data::Dumper;

my $VERSION = "0.0.2";

$ENV{'PATH'}='';
$ENV{'BASH_ENV'}='';
$ENV{'ENV'}='';

# define parameters here
my $BASE_DIR  = "/opt/vino/script/lvs";
my $CGI_DIR  = "/nagios/cgi-bin";
my $FPING    = "/usr/sbin/fping";
my $CFG_DIR  = $BASE_DIR ;
my $RRDS_DIR = $BASE_DIR . "/RRDdb/lvs";


my %STATUS_CODE = (
    'UNKNOWN'  => '-1',
    'OK'       => '0',
    'WARNING'  => '1',
    'CRITICAL' => '2'
);


my ($crit_alarm, $crit_msg, $warn_alarm, $warn_msg, $good_msg, $result_msg);

sub print_usage() {
    print "Usage: check_lvs -H host\n\n";
    print "Options:\n";
    print " -H --host STRING or IPADDRESS\n";
    print "   Check interface on the indicated host.\n";
    exit( $STATUS_CODE{"UNKNOWN"} );

}

if ( $#ARGV eq -1 ) { print_usage(); }

# - Initial arguments parsing
#vinodel
#if ( $ARGV[0] =~ /^-H|^--host/ ) {
#	$device = $ARGV[1];
#} else { print_usage(); }
#vinodel
my $device;

ARG:
while ( $ARGV[0] =~ /^-/ ) {
    if ( $ARGV[0] =~ /^-H|^--host/ ) {
        $device = $ARGV[1];
        shift @ARGV;
        shift @ARGV;
        next ARG;
    }
    print "Unknown flag: $ARGV[0]\n";
    exit( $STATUS_CODE{"UNKNOWN"} );
}

if ( !$device ) {
    print_usage();
}

my $url_string = "$CGI_DIR/lvsGrapher.cgi?d=$device" ;

my $url_string_off = "$CGI_DIR/lvsGrapher.cgi?d=$device" ;

# check if the device is alive
my $alive = `$FPING -a $device`;
if ( !$alive ) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">ERROR: $device is unreachable.</A>\n";
    exit( $STATUS_CODE{"CRITICAL"} );
}

# read XML style config file, which contains SNMP settings.
my $config = XMLin( $CFG_DIR . '/key.xml', KeyAttr => "ip" );

if ( !defined($config) ) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">ERROR: Can't open config xml.</A>\n";
    exit( $STATUS_CODE{"WARNING"} );
}

if (! $config->{'device'}->{$device}->{'read-community'} && ! $config->{'device'}->{$device}->{'version'} ) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">ERROR: no read-community has been found in config xml.</A>\n";
    exit( $STATUS_CODE{"WARNING"} );
}

my $timeframe=$config->{'device'}->{$device}->{'ignored-timeframe'};

my ( $session, $error );

# snmpv3 authkey or authpassword
if ($config->{'device'}->{$device}->{'version'} =~ /3/ ) {
	my $authkey = ''.$config->{'device'}->{$device}->{'authkey'};
	my $privkey = $config->{'device'}->{$device}->{'privkey'};
	$authkey=substr($authkey,2,32);
	$privkey=substr($privkey,2,32);

	( $session, $error ) = Net::SNMP->session(
		-hostname  => $device,
		-username => $config->{'device'}->{$device}->{'username'} || 'nomgmtuser',
		-version => $config->{'device'}->{$device}->{'version'},
		-authkey => '0x'.$authkey,
		#-authpassword  => $config->{'device'}->{$device}->{'authpassword'} || 'sOhU52312',
		#-authpassword  => 'AUTHVPWD',
		-authprotocol => 'md5',
		-privkey      => '0x'.$privkey,
		#-privpassword  => 'PRIVPWD',
		-privprotocol => 'des',
		-nonblocking => 1,
		-port        => 161,
		-timeout     => 20,
        -retries => 20
	);
} else {
	( $session, $error ) = Net::SNMP->session(
		-hostname  => $device,
		-community => $config->{'device'}->{$device}->{'read-community'} || 'public',
		-version => $config->{'device'}->{$device}->{'version'} || 'snmpv2c',
		-nonblocking => 1,
		-port        => 161,
		-timeout     => 25
	);
}

if ( !defined($session) ) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">";
    printf( "Session ERROR: %s.\n", $error );
    print "</A>\n";
    exit( $STATUS_CODE{"WARNING"} );
}


# define host/system oid

#my $oid_lvsVersion    = '.1.3.6.1.4.1.8225.4711.1.0';
my $oid_lvs = '.1.3.6.1.4.1.50933.1';

my @lvs_columns  		=(
	'.1.3.6.1.4.1.50933.1'	
);




my $result = $session->get_entries(
    -callback => [ \&lvs_cb, {} ],
    -columns  => \@lvs_columns
);

snmp_dispatcher();

if ( !defined($result) ) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">";
    printf( "ERROR: %s.\n", $session->error );
    print "</A>\n";
    $session->close;
    exit( $STATUS_CODE{"WARNING"} );
}

$session->close;


sub lvs_cb {

    my ( $session, $table ) = @_;

    if ( !defined( $session->var_bind_list ) ) {
        printf( "ERROR: %s\n", $session->error );
        exit( $STATUS_CODE{"WARNING"} );
    }

    my $tbl_lvsTable = $session->var_bind_list;

     $result_msg = "Lvs: ";
    foreach my $oid ( oid_lex_sort( keys( %{$tbl_lvsTable} ) ) ) {
        if ( !oid_base_match( $oid_lvs, $oid ) ) {
            # the real iterator is the index in the ifTable
            last;
        }else {
            #$result_msg .= $tbl_lvsTable->{$oid}."\;";
	    my $temp = $tbl_lvsTable->{$oid};
            (my $vip,my $realserver) = split /=/, $temp;
	    my @array = split /#/, $realserver; 
            foreach my $arr( @array) {
	           (my $rs_ip,my @rs) = split /:/, $arr;
	           my $curl = `/usr/bin/curl  --connect-timeout 1 -H "Host: $rs_ip" http://$vip/status.html 2>/dev/null`;
                   if ( $?==0 ){
                             $result_msg .= "$vip:$rs_ip \; ";
                   } else {
                       $result_msg .= "\[$vip:$rs_ip  can't connect \]\;";
                       $crit_alarm =1;
                   }
            }
            
       }
    }
}
                                            


if ($crit_alarm) {
    print "$result_msg \n";
#    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">$result_msg</A>\n";
    exit( $STATUS_CODE{"CRITICAL"} );
}

if ($warn_alarm) {
    print "$result_msg \n";
#    print "<A HREF=\"$url_string\" TARGET=\"_blank\">$result_msg</A>\n";
    exit( $STATUS_CODE{"WARNING"} );
}

print "$result_msg \n";
#print "<A HREF=\"$url_string\" TARGET=\"_blank\">$result_msg</A>\n";
exit( $STATUS_CODE{"OK"} );


