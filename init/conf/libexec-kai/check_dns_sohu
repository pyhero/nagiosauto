#!/usr/bin/perl -w
# nagios: +epn
# sohu MM DNS Status check plugin
# Huaping Huang <huapinghuang@sohu-inc.com>
# Feb 3 2009

use strict;

use Nagios::Plugin;
use Net::SNMP qw(oid_lex_sort snmp_dispatcher);
use FindBin qw($Bin);
use lib "$Bin/../utils/";
use MM::SNMP;
use MM::XML;
use Net::DNS;

my $CHK_ALIVE  = "/usr/sbin/fping -a";

my $crit_alarm;
my $message;

my $np = Nagios::Plugin->new(
    shortname => "DNSSTATUS",
    usage   => "Usage: %s [-H|--host=<host>] [-d|--domain=<domain>]",
    version => "0.0.1",
);
$np->add_arg(
    spec     => "H|host=s",
    help     => "Hostname or IP Address",
    required => 1,
);
$np->add_arg(
    spec     => "d|domain=s",
    help     => "Domain name to be checked",
    default  => "www.sohu.com",
    required => 0,
);
$np->getopts();

my $device = $np->opts->H;
my $check_domain = $np->opts->d;

# Check if the device is alive
if (!`$CHK_ALIVE $device 2>/dev/null`) {
    $np->nagios_exit(CRITICAL, "$device is unreachable.");
}

# Retrieve authkey/privkey for SNMPv3 authentication
my $config = MM::XML::xmlRetrieveConfig($device, "snmpd");

my $authkey = $config->{"authkey"};
my $privkey = $config->{"privkey"};
if (!defined($authkey) || !defined($privkey)) {
    $np->nagios_exit(WARNING, "authkey/privkey not found in config XML.");
}

# Create an SNMP Session
my ($session, $error) = MM::SNMP::snmpv3CreateSession($device, undef, $authkey, $privkey);

if (!defined($session)) {
    $np->nagios_exit(CRITICAL, $error);
}

# OID definitions
my $oid_dnsIndex = ".1.3.6.1.4.1.50922.1";
my $oid_dnsPort  = ".1.3.6.1.4.1.50922.2";
my $oid_dnsDesc  = ".1.3.6.1.4.1.50922.3";

# Get ...
my ($res_dnsIndex, $res_dnsPort, $res_dnsDesc);

my $stat_dnsIndex = MM::SNMP::snmpGetTable($session, \$res_dnsIndex, $oid_dnsIndex);
if (!defined($stat_dnsIndex)) {
    $error = $session->error();
    $session->close();
    $np->nagios_exit(CRITICAL, $error);
}
my $stat_dnsPort = MM::SNMP::snmpGetTable($session, \$res_dnsPort, $oid_dnsPort);
if (!defined($stat_dnsPort)) {
    $error = $session->error();
    $session->close();
    $np->nagios_exit(CRITICAL, $error);
}
my $stat_dnsDesc = MM::SNMP::snmpGetTable($session, \$res_dnsDesc, $oid_dnsDesc);
if (!defined($stat_dnsDesc)) {
    $error = $session->error();
    $session->close();
    $np->nagios_exit(CRITICAL, $error);
}
snmp_dispatcher();
if (!defined($res_dnsIndex) || !defined($res_dnsPort) || !defined($res_dnsDesc)) {
    $error = $session->error();
    $session->close();
    $np->nagios_exit(CRITICAL, $error);
}
$session->close();
&data_processing();

if ($crit_alarm) {
    $np->nagios_exit(CRITICAL, $message);
}
$np->nagios_exit(OK, $message);

# main end

sub data_processing
{
    $message .= "Ports: ";
    foreach my $oid (oid_lex_sort(keys(%{$res_dnsIndex}))) {
        my $port = $res_dnsPort->{$oid_dnsPort . "." . $res_dnsIndex->{$oid}};
        my $desc = $res_dnsDesc->{$oid_dnsDesc . "." . $res_dnsIndex->{$oid}};
        my $dns = Net::DNS::Resolver->new(
            nameservers => [$device],
            port        => $port,
            udp_timeout => 10,
        );
        my $query = $dns->search($check_domain);
        if ($query) {
            $message .= "$port($desc): OK ";
        } else {
            $crit_alarm = 1;
            $message .= "$port($desc): " . $dns->errorstring() . " ";
        }
    }
}

