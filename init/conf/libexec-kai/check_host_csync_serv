#!/usr/bin/perl -w
#
# check_host_csync v 0.0.1 - Nagios(r) check host resource plugin
#
# Copyright (c) 2004 Zhang Xiuling <xiulingzhang@sohu-inc.com>
# 2004-12-02 22:56
#
use strict;

use Net::SNMP qw(oid_lex_sort oid_base_match snmp_dispatcher);
use XML::Simple;
use RRDs;
use Time::Period;

my $VERSION = "0.0.1";

$ENV{'PATH'}='';
$ENV{'BASH_ENV'}='';
$ENV{'ENV'}='';

# define parameters here
my $BASE_DIR  = "/opt/sohu/nagios";
my $CGI_DIR  = "/nagios/cgi-bin";
my $FPING    = "/usr/sbin/fping";
my $CFG_DIR  = $BASE_DIR . "/etc";
my $RRDS_DIR = $BASE_DIR . "/RRDdb/csyncServ";

my %STATUS_CODE = (
    'UNKNOWN'  => '-1',
    'OK'       => '0',
    'WARNING'  => '1',
    'CRITICAL' => '2'
);

# default limits for warning and critical alarm
my $warn_limit = 8*60; 
my $crit_limit = 8*86400;

my ($crit_alarm, $crit_msg, $warn_alarm, $warn_msg, $good_msg, $result_msg);

sub print_usage() {
    print "Usage: check_host_csync -H host\n\n";
    print "Options:\n";
    print " -H --host STRING or IPADDRESS\n";
    print "   Check interface on the indicated host.\n";
    exit( $STATUS_CODE{"UNKNOWN"} );
}

if ( $#ARGV eq -1 ) { print_usage(); }

my $device;
# - Initial arguments parsing
if ( $ARGV[0] =~ /^-H|^--host/ ) {
	$device = $ARGV[1];
} else { print_usage(); }

if ( !$device ) {
    print_usage();
}

my $url_string = "$CGI_DIR/csyncServGrapher.cgi?d=$device";
my $url_string_off = "$CGI_DIR/csyncServGrapher-off.cgi?d=$device";

# check if the device is alive
my $alive = `$FPING -a $device`;
if ( !$alive ) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">ERROR: $device is unreachable.</A>\n";
    exit( $STATUS_CODE{"CRITICAL"} );
}

# read XML style config file, which contains SNMP settings.
my $config = XMLin( $CFG_DIR . '/network-devices.xml', KeyAttr => "ip" );

if ( !defined($config) ) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">ERROR: Can't open config xml.</A>\n";
    exit( $STATUS_CODE{"WARNING"} );
}

if (! $config->{'device'}->{$device}->{'read-community'} && ! $config->{'device'}->{$device}->{'version'} ) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">ERROR: no read-community has been found in config xml.</A>\n";
    exit( $STATUS_CODE{"WARNING"} );
}

my $timeframe=$config->{'device'}->{$device}->{'ignored-timeframe'};

my ( $session, $error );

# snmpv3 authkey or authpassword
if ($config->{'device'}->{$device}->{'version'} =~ /3/ ) {
	my $authkey = ''.$config->{'device'}->{$device}->{'authkey'};
	my $privkey = $config->{'device'}->{$device}->{'privkey'};
	$authkey=substr($authkey,2,32);
	$privkey=substr($privkey,2,32);

	( $session, $error ) = Net::SNMP->session(
		-hostname  => $device,
		-username => $config->{'device'}->{$device}->{'username'} || 'nomgmtuser',
		-version => $config->{'device'}->{$device}->{'version'},
		-authkey => '0x'.$authkey,
		#-authpassword  => $config->{'device'}->{$device}->{'authpassword'} || 'sOhU52312',
		#-authpassword  => 'AUTHVPWD',
		-authprotocol => 'md5',
		-privkey      => '0x'.$privkey,
		#-privpassword  => 'PRIVPWD',
		-privprotocol => 'des',
		-nonblocking => 1,
		-port        => 161,
		-timeout     => 25
	);
} else {
	( $session, $error ) = Net::SNMP->session(
		-hostname  => $device,
		-community => $config->{'device'}->{$device}->{'read-community'} || 'public',
		-version => $config->{'device'}->{$device}->{'version'} || 'snmpv2c',
		-nonblocking => 1,
		-port        => 161,
		-timeout     => 25
	);
}

if ( !defined($session) ) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">";
    printf( "Session ERROR: %s.\n", $error );
    print "</A>\n";
    exit( $STATUS_CODE{"WARNING"} );
}


#csyncStats
my $csyncIndex		= '.1.3.6.1.4.1.52312.3.3.1.1';
my $csyncName		= '.1.3.6.1.4.1.52312.3.3.1.2.';
my $csyncValue		= '.1.3.6.1.4.1.52312.3.3.1.3.';
my $csyncOut		= '.1.3.6.1.4.1.52312.3.3.1.4.';

my @system_columns  		=(
	'.1.3.6.1.4.1.52312.3'
);

my $tbl_system;
my $result = $session->get_entries(
    -callback => [ \&system_cb, {} ],
    -columns  => \@system_columns
);
my $update_time1 = time;
snmp_dispatcher();

if ( !defined($result) ) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">";
    printf( "ERROR2: %s.\n", $session->error );
    print "</A>\n";
    $session->close;
    exit( $STATUS_CODE{"WARNING"} );
}

$session->close;

if ($crit_alarm) {
    print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">$result_msg</A>\n";
    exit( $STATUS_CODE{"CRITICAL"} );
}

if ($warn_alarm) {
    print "<A HREF=\"$url_string\" TARGET=\"_blank\">$result_msg</A>\n";
    exit( $STATUS_CODE{"WARNING"} );
}

print "<A HREF=\"$url_string\" TARGET=\"_blank\">$result_msg</A>\n";
exit( $STATUS_CODE{"OK"} );

### main end


### sub start

sub system_cb {
	my ( $session, $table ) = @_;

	if ( !defined( $session->var_bind_list ) ) {
	print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">";
		printf( "ERROR3: %s\n", $session->error );
    	print "</A>\n";
		exit 1;
	}
	$tbl_system = $session->var_bind_list;

	my $update_time2 = time;

	my $update_time = int( ($update_time1 + $update_time2) / 2 );
	#$result_msg = $tbl_system->{$hrSystemUptime} ." (".$tbl_mymib->{$hostDate}.") " . $tbl_system->{$sysDescr} . " Load:".$tbl_system->{$laLoad1};
	$result_msg = "CSYNC ";

	#++ csync start

	#main loop start
	foreach my $oid ( oid_lex_sort( keys( %{$tbl_system} ) ) ) {
 		if ( !oid_base_match( $csyncIndex, $oid ) ) {
 			next;
 		}
		my $cName = $tbl_system->{ $csyncName . $tbl_system->{$oid} };
		my $cOut = $tbl_system->{ $csyncOut . $tbl_system->{$oid} };

		if ($cOut >  $crit_limit ) {
			my $cOutMsg = int($cOut/3600) ? sprintf("%.2fH",$cOut/3600) : int($cOut/60) ? sprintf("%.2fm",$cOut/60):$cOut;
			if ($cName !~ /cyber/ && $cName !~ /gold/) { $crit_alarm = 1; }
			$result_msg .= "[";
			$result_msg .= $cName;
			$result_msg .= ":";
			$result_msg .= $cOutMsg;
			$result_msg .= "]";
			$result_msg .= "  ";
		} elsif ( $cOut > $warn_limit ) {
			my $cOutMsg = int($cOut/3600) ? sprintf("%.2fH",$cOut/3600) : int($cOut/60) ? sprintf("%.2fm",$cOut/60):$cOut;
			if ($cName !~ /cyber/ && $cName !~ /gold/) { $warn_alarm = 1; }
			$result_msg .= "(";
			$result_msg .= $cName;
			$result_msg .= ":";
			$result_msg .= $cOutMsg;
			$result_msg .= ")";
			$result_msg .= "  ";
		} else {
			my $cOutMsg = int($cOut/3600) ? sprintf("%.2fH",$cOut/3600) : int($cOut/60) ? sprintf("%.2fm",$cOut/60):$cOut;
			$result_msg .= $cName;
			$result_msg .= ":";
			$result_msg .= $cOutMsg;
			$result_msg .= "  ";
		}

		# check if the RRD for this interface is exist
		if (  !-e $RRDS_DIR . '/' . $device . '_' . $cName . '.rrd' )
		{
			#1.3.6.1.4.1.2021.10.1.3.1 2 3  1/5/15 load average
			# create a new RRD if it doesn't exist
			RRDs::create(
			$RRDS_DIR . '/' . $device . '_' . $cName . '.rrd',
			"DS:csyncOut:GAUGE:180:0:U",
			"RRA:LAST:0.5:1:360",
			"RRA:LAST:0.5:5:288",
			"RRA:LAST:0.5:30:8640",
			"RRA:LAST:0.5:120:372",
			"RRA:LAST:0.5:1440:366",
			"RRA:LAST:0.5:10080:262",
			"--start=" . ( $update_time - 1 ),
			"--step=60"
			);
			if ( $error = RRDs::error ) {
			printf( "ERROR4: %s.\n", $error );
			exit( $STATUS_CODE{"WARNING"} );
			}
		}
		RRDs::update(
			$RRDS_DIR . '/' . $device . '_' . $cName . '.rrd',
			$update_time . ":"
			. $cOut
		);
		if ( $error = RRDs::error ) {
	print "<A HREF=\"$url_string_off\" TARGET=\"_blank\">";
			printf( "ERROR5: %s.\n", $error );
    	print "</A>\n";
			exit( $STATUS_CODE{"WARNING"} );
		}
		# out end
	}
	#main loop end


	#$result_msg .= "</A> ";

	#-- csync end
}
