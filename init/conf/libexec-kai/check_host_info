#!/usr/bin/perl -w

use strict;

use Nagios::Plugin;
use Net::SNMP qw(oid_base_match oid_lex_sort snmp_dispatcher);
use FindBin qw($Bin);
use lib "$Bin/../utils/";
use MM::SNMP;
use MM::XML;
use Data::Serializer;
use Data::Dumper;

my $DIR_NAGIOS = "$Bin/..";
my $DIR_INFO    = "$DIR_NAGIOS/info/host";
my $CHK_ALIVE  = "/usr/sbin/fping -a";

my $message;

my $np = Nagios::Plugin->new(
    usage   => "Usage: %s [-H|--host=<host>]",
    version => "0.0.1",
);
$np->add_arg(
    spec     => "H|host=s",
    help     => "Hostname or IP Address",
    required => 1,
);
$np->getopts();

my $device = $np->opts->H;

# Check if the device is alive
if (!`$CHK_ALIVE $device 2>/dev/null`) {
    $np->nagios_exit(WARNING, "$device is unreachable.");
}

# Retrieve authkey/privkey for SNMPv3 authentication
my $config = MM::XML::xmlRetrieveConfig($device, "snmpd");
my $authkey = $config->{"authkey"};
my $privkey = $config->{"privkey"};
if (!defined($authkey) || !defined($privkey)) {
    $np->nagios_exit(WARNING, "authkey/privkey not found in config XML.");
}

# Create an SNMP Session
my ($session, $error) = MM::SNMP::snmpv3CreateSession($device, undef, $authkey, $privkey);

if (!defined($session)) {
    $np->nagios_exit(WARNING, $error);
}

# OID definitions
# every scalar variable has a ".0" suffix
# System
my $oid_sysDescr     = ".1.3.6.1.2.1.1.1.0";
my $oid_memTotalReal = ".1.3.6.1.4.1.2021.4.5.0";
my $oid_memTotalSwap = ".1.3.6.1.4.1.2021.4.3.0";

# Interfaces (Table)
my $oid_ifTable       = ".1.3.6.1.2.1.2.2";
my $oid_ifIndex       = ".1.3.6.1.2.1.2.2.1.1";
my $oid_ifDescr       = ".1.3.6.1.2.1.2.2.1.2";
my $oid_ifType        = ".1.3.6.1.2.1.2.2.1.3";
my $oid_ifSpeed       = ".1.3.6.1.2.1.2.2.1.5";
my $oid_ifPhysAddress = ".1.3.6.1.2.1.2.2.1.6";
my $oid_ifOperStatus  = ".1.3.6.1.2.1.2.2.1.8";

# IPv4 (Table)
my $oid_ipAddrTable    = ".1.3.6.1.2.1.4.20";
my $oid_ipAdEntAddr    = ".1.3.6.1.2.1.4.20.1.1";
my $oid_ipAdEntIfIndex = ".1.3.6.1.2.1.4.20.1.2";

my @scalar_list;
push( @scalar_list,
      $oid_sysDescr,
      $oid_memTotalSwap,
      $oid_memTotalReal,
);

# Get...
my ($res_scalar, $res_ifTable, $res_ipAddrTable);
my $stat_scalar = MM::SNMP::snmpGetScalar($session, \$res_scalar, \@scalar_list);

if (!defined($stat_scalar)) {
    $np->nagios_exit(WARNING, $session->error());
}
my $stat_ifTable = MM::SNMP::snmpGetTable($session, \$res_ifTable, $oid_ifTable);
if (!defined($stat_ifTable)) {
    $np->nagios_exit(WARNING, $session->error());
}
my $stat_ipAddrTable = MM::SNMP::snmpGetTable($session, \$res_ipAddrTable, $oid_ipAddrTable);
if (!defined($stat_ipAddrTable)) {
    $np->nagios_exit(WARNING, $session->error());
}
snmp_dispatcher();
if (!defined($res_scalar) || !defined($res_ifTable) || !defined($res_ipAddrTable)) {
    $np->nagios_exit(WARNING, $session->error());
}
$session->close();
&data_processing();

$np->nagios_exit(OK, $message);

# main end

sub data_processing
{
    my @sysDescr = split(/\s+/, $res_scalar->{$oid_sysDescr});
    my @devicedirs = split(/\./, $device);
    my $hinfo;
    my $ipinfo;
    $hinfo->{'host'} = $device;
    $hinfo->{'hostname'} = $sysDescr[1];
    $hinfo->{'kernel'} = $sysDescr[2];
    $hinfo->{'arch'} = $sysDescr[-1];
    $hinfo->{'memory'} = sprintf("%d", $res_scalar->{$oid_memTotalReal} / 1024);
    $hinfo->{'swap'} = sprintf("%d", $res_scalar->{$oid_memTotalSwap} / 1024);
    $message = $hinfo->{'hostname'} ." Kernel: " . $hinfo->{'kernel'} . " " . $hinfo->{'arch'} . " Mem: " 
             . $hinfo->{'memory'} . "MB Swap: " . $hinfo->{'swap'} . "MB";
    my $dir = "$DIR_INFO";
    foreach my $seg (@devicedirs) {
        $dir .= "/$seg";
        if (!-d $dir) {
            unlink("$dir") if (-e $dir);
            mkdir("$dir");
        }
    }
    # store interface->ip relationship
    my $if2ip;
    foreach my $oid (oid_lex_sort(keys(%{$res_ipAddrTable}))) {
        if (!oid_base_match($oid_ipAdEntAddr, $oid)) {
            last;
        }
        push(@{$if2ip->{$res_ipAddrTable->{$oid_ipAdEntIfIndex . "." . $res_ipAddrTable->{$oid}}}}, $res_ipAddrTable->{$oid});
    }
    my @info;
    foreach my $oid (oid_lex_sort(keys(%{$res_ifTable}))) {
        if (!oid_base_match($oid_ifIndex, $oid)) {
            last;
        }
        # ifType: ethernetCsmacd(6) iso88023Csmacd(7) propVirtual(53) gigabitEthernet(113)
        # ifOperStatus: up(1)
        if (   (($res_ifTable->{$oid_ifType . "." . $res_ifTable->{$oid}} == 6) || ($res_ifTable->{$oid_ifType . "." . $res_ifTable->{$oid}} == 7) || ($res_ifTable->{$oid_ifType . "." . $res_ifTable->{$oid}} == 53) || ($res_ifTable->{$oid_ifType . "." . $res_ifTable->{$oid}} == 113))
            && ($res_ifTable->{$oid_ifOperStatus . "." . $res_ifTable->{$oid}} == 1))
        {
            my $ifIndex       = $res_ifTable->{$oid};
            my $ifDescr       = $res_ifTable->{$oid_ifDescr . "." . $ifIndex};
            my $ifPhysAddress = $res_ifTable->{$oid_ifPhysAddress . "." . $ifIndex};
            my $ifSpeed = $res_ifTable->{$oid_ifSpeed . "." . $ifIndex};
            my $cursor; $cursor->{ifDescr} = $ifDescr; $cursor->{ifPhysAddress} = $ifPhysAddress; $cursor->{ifSpeed} = $ifSpeed;
            push (@info, $cursor);
            # ignore ifaces without ip, WITHOUT EXCEPTIONS!
            if (grep(/^$ifIndex$/, keys(%{$if2ip})) == 0) {
                next;
            }
            # correct the ifSpeed for bonds, VLANs and xen ...2
            if ($ifDescr =~ /^bond\d+$/) {
                $ifSpeed = 0;
                foreach $cursor (@info) {
                    if ($ifDescr ne $cursor->{ifDescr} && $ifPhysAddress eq $cursor->{ifPhysAddress}) {
                        $ifSpeed += $cursor->{ifSpeed};
                    }
                }
            } elsif ($ifDescr =~ /^eth\d+\.\d+$/) {
                foreach $cursor (@info) {
                    if ($ifDescr ne $cursor->{ifDescr} && $cursor->{ifDescr} !~ /eth\d+\.\d+/ && $ifPhysAddress eq $cursor->{ifPhysAddress}) {
                        $ifSpeed = $cursor->{ifSpeed};
                        last;
                    }
                }
            # today, no 10M ifaces!
            } elsif ($ifSpeed <= 10000000) {
                $ifSpeed = 0;
            }
            # translate mac to a human-readable format
            $ifPhysAddress =~ s/0x(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})/$1:$2:$3:$4:$5:$6/g;
            foreach my $iparray ($if2ip->{$ifIndex}) {
                foreach my $ip (@$iparray) {
                    # an ip corresponds to an if, but this if may have other sibling alias ips, here list it
                    push (@{$hinfo->{'ip'}}, $ip);
                    $ipinfo->{$ip}->{'ip'} = $iparray;
                    $ipinfo->{$ip}->{'ifDescr'} = $ifDescr;
                    $ipinfo->{$ip}->{'ifPhysAddress'} = uc($ifPhysAddress);
                    $ipinfo->{$ip}->{'ifSpeed'} = $ifSpeed;
                }
            }
        }
    }
    # link all the ip to $device dir
    foreach my $ip (keys(%{$ipinfo})) {
        next if ($ip eq $device);
        my @ipdirs= split(/\./, $ip);
        my $lastseg = pop(@ipdirs);
        my $ldir = "$DIR_INFO";
        foreach my $seg (@ipdirs) {
            $ldir .= "/$seg";
            if (!-e $ldir) {
                mkdir("$ldir");
            } elsif (!-d $ldir && !-l $dir) {
                unlink("$ldir");
                mkdir("$ldir");
            }
        }
        $ldir .= "/$lastseg";
        if (-e $ldir) {
            if (-d $ldir) {
                system("/bin/rm -rf $ldir");
            } else {
                unlink("$ldir");
            }
        }
        symlink($dir, $ldir);
    }
    $ipinfo->{'host'} = $device;
    my $serializer = Data::Serializer->new();
    my $time = time();
    $hinfo->{'timestamp'} = $time;
    $ipinfo->{'timestamp'} = $time;
    $serializer->store($hinfo, "$dir/hostinfo", "w", 0644);
    $serializer->store($ipinfo, "$dir/ipinfo", "w", 0644);
    $serializer->DESTROY();
}

